q()
q()
q()
install.packages("slidify")
install.packages("KernSmooth")
library(KernSmooth)
library(ggplot2)
library(devtools)
find.package("devtools")
install.packages("devtools")
library(devtools)
ls
find_rtools()
library(devtools)
serach()
search()
install.packages(c("ggplot2", "devtools"))
install.packages("ggplot2")
install.packages("devtools")
library(ggplot2)
library(devtools)
search()
find_rtools
find_rtools()
ls
q()
ls()
ls
q()
install.packages("xlsx")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
update.packages(ask='graphics',checkBuilt=TRUE)
update.packages(ask='graphics',checkBuilt=TRUE)
library(mgcv)
update.packages(ask='graphics',checkBuilt=TRUE)
utils:::menuInstallPkgs()
library(JavaGD)
q()
install.packages("RMySQL")
library(RMySQL")
"
library("RMySQL")
library(RMySQL)
install.packages("RMySQL")
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
reas.csv( "path2csv.csv", stringsAsFactors = FALSE )
read.csv( "path2csv.csv", stringsAsFactors = FALSE )
path2csv <- read.csv( "path2csv", stringsAsFactors = FALSE )
mydf <- read.csv( "path2csv", stringsAsFactors = FALSE )
?read.csv
mydf <- read.csv( file = "path2csv", stringsAsFactors = FALSE )
path2csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tb1_df
tb1_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
?select
select(cran, country:r_arch)
cran
do select(cran, -time)
select(cran, -time)
-5:20
-5:-20
-(5:20)
select(cran, X:size)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter( cran, !is.na(r_version) )
cran.select()
?select
cran2 <- select( cran, size:ip_id )
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select( cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by( cran )
by_package <- group_by( cran, package )
by_package
summarize(by_package)
summarize(by_package, mean(size))
?n
?n_distinct
submit()
tb1
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter( pack_sum, count > 679)
top_counts <- filter( pack_sum, count > 679)
top_counts
head(top_counts, 20)
?arrange
arrange( top_count, count )
arrange( top_counts, count )
arrange( top_counts, desc(count) )
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter( pack_sum, unique > 465 )
top_unique
arrange( top_unique, desc(unique) )
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?mutate
?mutate
submit()
submit()
submit()
submit()
submit()
reset()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
q()
library(swirl)
swirl()
ymd("1989-05-17")
bye()
swirl()
install.packages("tidyr")
q()
q()
q()
q()
q()
dir()
q()
